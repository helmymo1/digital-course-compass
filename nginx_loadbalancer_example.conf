# This is an example Nginx configuration for load balancing.
# It would typically be placed in /etc/nginx/conf.d/myapp.conf or included in nginx.conf

# http { # This block is usually in the main nginx.conf

    # Define a group of upstream application servers
    upstream myapp_backend {
        # Default load balancing algorithm is round-robin.
        # Other options: least_conn, ip_hash

        # Example: Round Robin (default)
        # server app_server1.example.com:8080;
        # server app_server2.example.com:8080;
        # server app_server3.example.com:8080;

        # Example: Least Connections
        # Routes new requests to the server with the fewest active connections.
        least_conn;
        server 192.168.1.101:80; # Replace with actual backend server IP/hostname and port
        server 192.168.1.102:80;
        # server 192.168.1.103:80 weight=3; # Higher weight gets more traffic proportionally
        # server 192.168.1.104:80 backup;   # Only used if primary servers are down

        # For Nginx to consider a server down, you might need to configure
        # proxy_next_upstream directives in the location block.
        # Active health checks are available in Nginx Plus or with third-party modules.
    }

    server {
        listen 80; # Load balancer listens on port 80 for HTTP traffic
        server_name your_application_domain.com; # Replace with your domain

        location / {
            proxy_pass http://myapp_backend; # Forward requests to the 'myapp_backend' upstream group

            # Set headers to pass information to backend servers
            proxy_set_header Host $host; # Passes the original Host header
            proxy_set_header X-Real-IP $remote_addr; # Passes the client's real IP address
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # List of IPs including proxies
            proxy_set_header X-Forwarded-Proto $scheme; # http or https

            # Timeouts (optional, adjust as needed)
            # proxy_connect_timeout 5s;
            # proxy_read_timeout 60s;
            # proxy_send_timeout 60s;

            # Handling server errors and retries (optional)
            # proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            # proxy_next_upstream_tries 3; # Try up to 3 different servers
            # proxy_next_upstream_timeout 10s; # Timeout for trying next upstream
        }

        # Optional: Access and error logs for this server block
        # access_log /var/log/nginx/your_application_domain.access.log;
        # error_log /var/log/nginx/your_application_domain.error.log;
    }

    # --- Example for HTTPS (SSL/TLS Termination at Load Balancer) ---
    # You would need an SSL certificate for your domain.
    # server {
    #     listen 443 ssl http2; # Listen on port 443 for HTTPS
    #     server_name your_application_domain.com;

    #     # SSL Certificate paths
    #     # ssl_certificate /etc/nginx/ssl/your_application_domain.com.pem; # Or .crt
    #     # ssl_certificate_key /etc/nginx/ssl/your_application_domain.com.key;

    #     # Recommended SSL settings (refer to Nginx docs and security best practices)
    #     # ssl_protocols TLSv1.2 TLSv1.3;
    #     # ssl_prefer_server_ciphers on;
    #     # ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:...'; # Strong cipher suite

    #     location / {
    #         proxy_pass http://myapp_backend;

    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto https; # Important: set to https
    #         proxy_set_header X-Scheme https; # Some applications might use this
    #     }
    # }

# } # End of http block (usually in main nginx.conf)
